#!/usr/bin/ansible-playbook
#
# Deploy Cluster Operator to a development cluster.
#
# Wraps the main deploy-playbook.yaml and adds additional performs additional
# devel specific tasks.
---

# Perform a normal deployment:
- import_playbook: deploy-playbook.yml

- hosts: localhost
  connection: local
  gather_facts: no
  vars:
    # Namespace to deploy CO to:
    cluster_operator_namespace: "openshift-cluster-operator"

    # Namespace for cluster versions:
    cluster_version_namespace: "openshift-cluster-operator"

    # Images to deploy on target cluster
    cluster_api_image: "registry.svc.ci.openshift.org/openshift-cluster-operator/kubernetes-cluster-api:latest"
    cluster_api_image_pull_policy: "Always"
    machine_controller_image: "registry.svc.ci.openshift.org/openshift-cluster-operator/cluster-operator:latest"
    machine_controller_image_pull_policy: "Always"

    # Normally we assume to build and push images for devel deployments:
    push_images: True
  tasks:

  - name: build images off latest source
    shell: make images
    args:
      chdir: "{{ playbook_dir }}/../../"
    when: push_images | bool

  - name: push devel images to integrated registry
    command: make integrated-registry-push
    args:
      chdir: "{{ playbook_dir }}/../../"
    when: push_images | bool

  - name: wait for apiserver deployment to finish
    command: |-
      oc rollout status deploymentconfig/cluster-operator-apiserver -n {{ cluster_operator_namespace | quote }}

  - name: wait for controller-manager deployment to finish
    command: |-
      oc rollout status deploymentconfig/cluster-operator-controller-manager -n {{ cluster_operator_namespace | quote }}

  - import_role:
      name: kubectl-ansible

  - name: create/update playbook mock deployment
    kubectl_apply:
      namespace: "{{ cluster_operator_namespace }}"
      src: "{{ playbook_dir }}/../examples/deploy-playbook-mock.yaml"

  - name: process cluster versions template
    oc_process:
      template_file: "{{ playbook_dir }}/../examples/cluster-versions-template.yaml"
      parameters:
        CLUSTER_VERSION_NS: "{{ cluster_version_namespace }}"
        CLUSTER_API_IMAGE: "{{ cluster_api_image }}"
        CLUSTER_API_IMAGE_PULL_POLICY: "{{ cluster_api_image_pull_policy }}"
        MACHINE_CONTROLLER_IMAGE: "{{ machine_controller_image }}"
        MACHINE_CONTROLLER_IMAGE_PULL_POLICY: "{{ machine_controller_image_pull_policy }}"
    register: cluster_versions_reg

  - name: create/update cluster versions
    kubectl_apply:
      definition: "{{ cluster_versions_reg.result | to_json }}"
    # Even with waiting for the apiserver deployment, there are still a few seconds before the apiserver responds:
    retries: 5
    delay: 5
    register: create_versions_result
    until: create_versions_result is succeeded
    ignore_errors: yes

  - debug: var=create_versions_result
    when: not create_versions_result is succeeded

  - name: report error if unable to create cluster versions
    fail:
      msg: 'Unable to create cluster versions'
    when: not create_versions_result is succeeded

